import{am as p,s as m,Y as s}from"./index-DDVYhT7_.js";import{p as n}from"./MeshVertexAttributes-DFW3YWq8.js";import{B as a}from"./vertexSpaceConversion-DHVZlMT5.js";import"./meshProperties-Cj6q1fp6.js";import"./mat3f64-B5o_lm6j.js";import"./mat4f64-q_b6UJoq.js";import"./spatialReferenceEllipsoidUtils-ChphPyVv.js";import"./computeTranslationToOriginAndRotation-DOR9lLXP.js";import"./projectPointToVector-D11LO9cE.js";import"./meshVertexSpaceUtils-CBV4GP3q.js";import"./MeshLocalVertexSpace-BXnU_6mH.js";import"./vec3-CoMK6leD.js";import"./BufferView-CSwX2r8M.js";import"./vec4-CPElF36E.js";async function E(t,r,o){await Promise.resolve(),p(o);const e=a(t,r,{useEllipsoid:o?.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:s(t.vertexAttributes.uv),color:s(t.vertexAttributes.color)}),r);return i.transform=null,i}export{E as convertMeshVertexSpace};
