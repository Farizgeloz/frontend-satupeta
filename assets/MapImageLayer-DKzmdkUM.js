const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/mapImageLayerUtils-B2HGGtPl.js","assets/utils-BTa_3M71.js","assets/index-D-NAnen2.js","assets/index-vzzAzBCf.css","assets/originUtils-D6qOn2XX.js","assets/jsonContext-DRLLXxNn.js","assets/saveUtils-DL39gwP7.js"])))=>i.map(i=>d[i]);
import{cq as w,fi as O,cr as _,fj as $,fk as E,f2 as T,eS as P,eT as A,eU as L,eR as R,f4 as F,f3 as M,ct as j,fl as V,ao as q,fe as v,fc as f,fm as b,fn as N,dv as U,fo as J,ap as g,ai as k,bo as z,fp as W,s as S,n as D,cs as G,_ as H,v as s,w as n,fq as x,eV as Z,fh as B,f1 as C,x as K,fr as Q,fs as X}from"./index-D-NAnen2.js";import{y as Y}from"./ExportImageParameters-o9PKbLc-.js";import{t as ee}from"./versionUtils-BRbxGUTg.js";import{A as y}from"./interfaces-CL2NbQte.js";import"./floorFilterUtils-n6UOt7ty.js";let r=class extends w(O(_($(E(T(P(A(L(R(F(M(G)))))))))))){constructor(...e){super(...e),this._exportImageParameters=new Y({layer:this}),this.dateFieldsTimeZone=null,this.datesInUnknownTimezone=!1,this.dpi=96,this.elevationInfo=new j({mode:"on-the-ground"}),this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.preferredTimeZone=null,this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null,this._debouncedSaveOperations=V((async(t,l,i)=>{const{save:p,saveAs:o}=await H(()=>import("./mapImageLayerUtils-B2HGGtPl.js"),__vite__mapDeps([0,1,2,3,4,5,6]));switch(t){case y.SAVE:return p(this,l);case y.SAVE_AS:return o(this,i,l)}}))}normalizeCtorArgs(e,t){return typeof e=="string"?{url:e,...t}:e}load(e){const t=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(q).then((()=>this._fetchService(t)))),Promise.resolve(this)}destroy(){this._exportImageParameters.destroy()}readImageFormat(e,t){const l=t.supportedImageFormatTypes;return l&&l.includes("PNG32")?"png32":"png24"}writeSublayers(e,t,l,i){if(!this.loaded||!e)return;const p=e.slice().reverse().flatten((({sublayers:a})=>a&&a.toArray().reverse())).toArray();let o=!1;const m=v(i.origin);let h;if(this.capabilities?.operations.supportsExportMap&&this.capabilities?.exportMap?.supportsDynamicLayers){if(m===f.PORTAL_ITEM){const a=this.createSublayersForOrigin("service").sublayers;o=b(p,a,f.SERVICE)}else if(m>f.PORTAL_ITEM){const a=this.createSublayersForOrigin("portal-item");o=b(p,a.sublayers,v(a.origin)),h=a.originWithPartialOverrides}}const c=[],d={writeSublayerStructure:o,...i,minimumWritableOrigin:h};let u=o||this.hasVisibleLayersForOrigin(m);p.forEach((a=>{const I=a.write({},d);c.push(I),u=u||a.originOf("visible")==="user"})),c.some((a=>Object.keys(a).length>1))&&(t.layers=c),u&&(t.visibleLayers=p.filter((a=>a.visible)).map((a=>a.id)))}createExportImageParameters(e,t,l,i){const p=i?.pixelRatio||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian()),this._exportImageParameters.floors=i?.floors??null,this._exportImageParameters.scale=N({extent:e,width:t})*p;const o=this._exportImageParameters.toJSON(),m=!i?.rotation||this.version<10.3?{}:{rotation:-i.rotation},h=e?.spatialReference,c=U(h);o.dpi*=p;const d={};if(i?.timeExtent){const{start:u,end:a}=i.timeExtent.toJSON();d.time=u&&a&&u===a?""+u:`${u??"null"},${a??"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(d.time="null,null");return{bbox:e?e.xmin+","+e.ymin+","+e.xmax+","+e.ymax:void 0,bboxSR:c,imageSR:c,size:t+","+l,...o,...m,...d}}async fetchImage(e,t,l,i){const{data:p}=await this._fetchImage("image",e,t,l,i);return p}async fetchImageBitmap(e,t,l,i){const{data:p,url:o}=await this._fetchImage("blob",e,t,l,i);return J(p,o,i?.signal)}async fetchRecomputedExtents(e={}){const t={...e,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:l}=await g(this.url,t),{extent:i,fullExtent:p,timeExtent:o}=l,m=i||p;return{fullExtent:m&&z.fromJSON(m),timeExtent:o&&k.fromJSON({start:o[0],end:o[1]})}}loadAll(){return W(this,(e=>{e(this.allSublayers),e(this.subtables)}))}async save(e){return this._debouncedSaveOperations(y.SAVE,e)}async saveAs(e,t){return this._debouncedSaveOperations(y.SAVE_AS,t,e)}serviceSupportsSpatialReference(e){return ee(this,e)}async _fetchImage(e,t,l,i,p){const o={responseType:e,signal:p?.signal??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(t,l,i,p),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},m=this.parsedUrl.path+"/export";if(o.query?.dynamicLayers!=null&&!this.capabilities?.exportMap?.supportsDynamicLayers)throw new S("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:o.query});try{const{data:h}=await g(m,o);return{data:h,url:m}}catch(h){throw D(h)?h:new S("mapimagelayer:image-fetch-error",`Unable to load image: ${m}`,{error:h})}}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:t,ssl:l}=await g(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:e});l&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=t,this.read(t,{origin:"service",url:this.parsedUrl})}hasVisibleLayersForOrigin(e){return!(e==null||!this.sublayersSourceJSON[e]?.visibleLayers)}};s([n(x("dateFieldsTimeReference"))],r.prototype,"dateFieldsTimeZone",void 0),s([n({type:Boolean})],r.prototype,"datesInUnknownTimezone",void 0),s([n()],r.prototype,"dpi",void 0),s([n()],r.prototype,"elevationInfo",void 0),s([n()],r.prototype,"gdbVersion",void 0),s([n()],r.prototype,"imageFormat",void 0),s([Z("imageFormat",["supportedImageFormatTypes"])],r.prototype,"readImageFormat",null),s([n({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],r.prototype,"imageMaxHeight",void 0),s([n({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],r.prototype,"imageMaxWidth",void 0),s([n()],r.prototype,"imageTransparency",void 0),s([n({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],r.prototype,"isReference",void 0),s([n({json:{read:!1,write:!1}})],r.prototype,"labelsVisible",void 0),s([n({type:["ArcGISMapServiceLayer"]})],r.prototype,"operationalLayerType",void 0),s([n({json:{read:!1,write:!1}})],r.prototype,"popupEnabled",void 0),s([n(x("preferredTimeReference"))],r.prototype,"preferredTimeZone",void 0),s([n()],r.prototype,"sourceJSON",void 0),s([n({json:{write:{ignoreOrigin:!0}}})],r.prototype,"sublayers",void 0),s([B("sublayers",{layers:{type:[X]},visibleLayers:{type:[Q]}})],r.prototype,"writeSublayers",null),s([n({type:["show","hide","hide-children"],json:{origins:{"portal-item":{read:!1,write:!1}}}})],r.prototype,"listMode",void 0),s([n({json:{read:!1},readOnly:!0,value:"map-image"})],r.prototype,"type",void 0),s([n(C)],r.prototype,"url",void 0),r=s([K("esri.layers.MapImageLayer")],r);const oe=r;export{oe as default};
