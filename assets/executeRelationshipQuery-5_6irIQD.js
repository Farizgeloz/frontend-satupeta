import{dp as j,ap as p,dv as R,hB as l,ds as y,E as h}from"./index-DoYlmobM.js";function m(r,t){const e=r.toJSON();return e.objectIds&&(e.objectIds=e.objectIds.join(",")),e.orderByFields&&(e.orderByFields=e.orderByFields.join(",")),e.outFields&&!t?.returnCountOnly?e.outFields.includes("*")?e.outFields="*":e.outFields=e.outFields.join(","):delete e.outFields,e.outSR&&(e.outSR=R(e.outSR)),e.dynamicDataSource&&(e.layer=JSON.stringify({source:e.dynamicDataSource}),delete e.dynamicDataSource),e}async function F(r,t,e){const s=await f(r,t,e),o=s.data,n=o.geometryType,a=o.spatialReference,c={};for(const u of o.relatedRecordGroups){const d={fields:void 0,geometryType:n,spatialReference:a,hasZ:!!o.hasZ,hasM:!!o.hasM,features:u.relatedRecords};if(u.objectId!=null)c[u.objectId]=d;else for(const i of Object.keys(u))i!=="relatedRecords"&&(c[u[i]]=d)}return{...s,data:c}}async function b(r,t,e){const s=await f(r,t,e,{returnCountOnly:!0}),o=s.data,n={};for(const a of o.relatedRecordGroups)a.objectId!=null&&(n[a.objectId]=a.count);return{...s,data:n}}async function f(r,t,e={},s){const o=j({...r.query,f:"json",...s,...m(t,s)});return p(r.path+"/queryRelatedRecords",{...e,query:{...e.query,...o}})}async function I(r,t,e){t=l.from(t);const s=y(r);return F(s,t,e).then((o=>{const n=o.data,a={};return Object.keys(n).forEach((c=>a[c]=h.fromJSON(n[c]))),a}))}async function O(r,t,e){t=l.from(t);const s=y(r);return b(s,t,{...e}).then((o=>o.data))}export{I as executeRelationshipQuery,O as executeRelationshipQueryForCount};
