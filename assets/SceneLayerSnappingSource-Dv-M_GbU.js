import{db as w,lQ as C,bd as m,cO as L,v as s,w as o,x as f,fV as H,aK as E,iY as x,fW as _,kK as I,am as $,O}from"./index-DoYlmobM.js";import{h as k}from"./WorkerHandle-B-Ng0GP0.js";import{t as h}from"./workerHelper-CFPrL6MA.js";import{f as V}from"./edgeProcessing-BVtGVFVD.js";import{V as A}from"./sphere-T3GPGple.js";import{b as v,m as R}from"./hitTestSelectUtils-DzHVKV_w.js";import{c as D}from"./RouteLayerInteraction-DWwHjhtJ.js";import{r as P}from"./VertexSnappingCandidate-ClrReZI4.js";import"./InterleavedLayout-BKMzSCCA.js";import"./BufferView-bMjXPEsc.js";import"./types-BKo2foNY.js";import"./deduplicate-1l-dKrho.js";import"./Indices-Dnuh6a1e.js";import"./VertexAttribute-BfkzOMLV.js";import"./glUtil-B3bO9WB2.js";import"./VertexElementDescriptor-BLyltQyJ.js";import"./Normals-2kQQ7Rz3.js";import"./mat3f64-B5o_lm6j.js";import"./vectorStacks-CPr9auFt.js";import"./mat4f64-q_b6UJoq.js";import"./quatf64-aQ5IuZRd.js";import"./quantityUtils-DVa92CTV.js";import"./projectVectorToVector-CPX37kmf.js";import"./projectPointToVector-5VdqH2c-.js";import"./geodesicUtils-D26b1t-b.js";import"./plane-D37dYf6v.js";import"./elevationInfoUtils-C6d6c5VR.js";import"./spatialReferenceEllipsoidUtils-D5EyhoVR.js";import"./GraphicsLayer-CIUt59Wh.js";import"./Stop-DURceDaL.js";import"./networkEnums-BrePzGye.js";import"./geodeticLengthOperator-CKdqhjKr.js";import"./geodeticCurveType-CirnHLSB.js";import"./earcut-D9gy186-.js";import"./triangle-B5M9USAN.js";import"./lineSegment-D31xHRUS.js";import"./PointSnappingHint-BcrXM1u2.js";class W extends k{constructor(t){super("EdgeProcessingWorker","extract",{extract:r=>[r.dataBuffer],extractComponentsEdgeLocations:r=>[r.dataBuffer],extractEdgeLocations:r=>[r.dataBuffer]},t)}async process(t,r,i){return i?V(t):j(await this.invoke(new g(t),r))}async extractEdgeLocations(t,r){const i=await this.invokeMethod("extractEdgeLocations",new g(t),r);return h(i)}async extractComponentsEdgeLocations(t,r){const i=await this.invokeMethod("extractComponentsEdgeLocations",new g(t),r);return h(i)}}function j(e){return{regular:{instancesData:h(e.regular.instancesData),lodInfo:{lengths:new Float32Array(e.regular.lodInfo.lengths)}},silhouette:{instancesData:h(e.silhouette.instancesData),lodInfo:{lengths:new Float32Array(e.silhouette.lodInfo.lengths)}},averageEdgeLength:e.averageEdgeLength}}class g{constructor(t){this.dataBuffer=t.data.buffer,this.writerSettings=t.writerSettings,this.skipDeduplicate=t.skipDeduplicate,this.indices=w(t.indices)?t.indices.buffer:t.indices,this.indicesType=w(t.indices)?C(t.indices)?"Uint32Array":"Uint16Array":"Array",this.indicesLength=t.indicesLength}}let d=class extends m{constructor(e){super(e),this.availability=0,this._ids=new Set}destroy(){this._workerHandle.destroy(),this._workerHandle=null}initialize(){this._workerHandle=new B(this.schedule,{fetchAllEdgeLocations:(e,t)=>this._fetchAllEdgeLocations(e,t)})}async fetchCandidates(e,t){const r=e.coordinateHelper,{point:i}=e,n=M;this.renderCoordsHelper.toRenderCoords(i,r.spatialReference,n);const p=e.distance,c=typeof p=="number"?p:p.distance,u=await this._workerHandle.invoke({bounds:A(n[0],n[1],n[2],c),returnEdge:e.returnEdge,returnVertex:e.vertexMode!=="none"},t);return u.candidates.sort(((y,b)=>y.distance-b.distance)),u.candidates.map((y=>this._convertCandidate(r,y)))}async add(e,t){this._ids.add(e.id),await this._workerHandle.invokeMethod("add",e,t)}async remove(e,t){this._ids.delete(e.id),await this._workerHandle.invokeMethod("remove",e,t)}_convertCandidate(e,t){switch(t.type){case"edge":return new D({objectId:t.objectId,targetPoint:v(this._convertRenderCoordinate(e,t.target)),edgeStart:this._convertRenderCoordinate(e,t.start),edgeEnd:this._convertRenderCoordinate(e,t.end),isDraped:!1});case"vertex":return new P({objectId:t.objectId,targetPoint:v(this._convertRenderCoordinate(e,t.target)),isDraped:!1})}}_convertRenderCoordinate({spatialReference:e},t){const r=L();return this.renderCoordsHelper.fromRenderCoords(t,r,e),R(r)}async _fetchAllEdgeLocations(e,t){const r=[],i=[];for(const{id:n,uid:p}of e.components)this._ids.has(n)&&r.push((async()=>{const c=await this.fetchEdgeLocations(n,t.signal),u=c.locations.buffer;return i.push(u),{id:n,uid:p,objectIds:c.objectIds,locations:u,origin:c.origin,type:c.type}})());return{result:{components:(await Promise.all(r)).filter((({id:n})=>this._ids.has(n)))},transferList:i}}};s([o({constructOnly:!0})],d.prototype,"renderCoordsHelper",void 0),s([o({constructOnly:!0})],d.prototype,"fetchEdgeLocations",void 0),s([o({constructOnly:!0})],d.prototype,"schedule",void 0),s([o({readOnly:!0})],d.prototype,"availability",void 0),d=s([f("esri.views.interactive.snapping.featureSources.sceneLayerSource.SceneLayerSnappingSourceWorkerHandle")],d);let B=class extends k{constructor(t,r){super("SceneLayerSnappingSourceWorker","fetchCandidates",{},t,{strategy:"dedicated",client:r})}};const M=L();let a=class extends m{get updating(){return this._updatingHandles.updating}constructor(e){super(e),this.availability=1,this._updatingHandles=new H,this._abortController=new AbortController}destroy(){this._tracker=E(this._tracker),this._abortController=x(this._abortController),this._updatingHandles.destroy()}initialize(){const{view:e}=this,t=e.resourceController;this._edgeWorker=new W(S(t)),this._workerHandle=new d({renderCoordsHelper:this.view.renderCoordsHelper,schedule:S(t),fetchEdgeLocations:async(r,i)=>{if(this._tracker==null)throw new Error("tracker-not-initialized");return this._tracker.fetchEdgeLocations(r,this._edgeWorker,i)}}),this._updatingHandles.addPromise(this._setupLayerView()),this.addHandles([_(this._workerHandle),_(this._edgeWorker)])}async fetchCandidates(e,t){return this._workerHandle.fetchCandidates(e,t)}refresh(){}async _setupLayerView(){if(this.destroyed)return;const e=this._abortController?.signal,t=await this.getLayerView();t==null||I(e)||(this._tracker=t.trackSnappingSources({add:(r,i)=>{this._updatingHandles.addPromise(this._workerHandle.add({id:r,bounds:i},e))},remove:r=>{this._updatingHandles.addPromise(this._workerHandle.remove({id:r},e))}}))}};function S(e){return t=>e.immediate.schedule(t)}s([o({constructOnly:!0})],a.prototype,"getLayerView",void 0),s([o({constructOnly:!0})],a.prototype,"view",void 0),s([o({readOnly:!0})],a.prototype,"updating",null),s([o({readOnly:!0})],a.prototype,"availability",void 0),a=s([f("esri.views.interactive.snapping.featureSources.I3SSnappingSource")],a);let l=class extends m{get updating(){return this._i3sSources.some((e=>e.updating))}constructor(e){super(e),this.availability=1,this._i3sSources=[]}destroy(){this._i3sSources.forEach((e=>e.destroy())),this._i3sSources.length=0}initialize(){const{view:e}=this,t=this.layerSource.layer;this._i3sSources=t.type==="building-scene"?this._getBuildingSceneI3SSources(e,t):[this._getSceneLayerI3SSource(e,t)]}async fetchCandidates(e,t){const r=await Promise.all(this._i3sSources.map((i=>i.fetchCandidates(e,t))));return $(t),r.flat()}refresh(){this._i3sSources.forEach((e=>e.refresh()))}_getBuildingSceneI3SSources(e,t){return t.allSublayers.toArray().map((r=>r.type==="building-component"?new a({getLayerView:async()=>(await e.whenLayerView(t)).whenSublayerView(r),view:e}):null)).filter(O)}_getSceneLayerI3SSource(e,t){return new a({getLayerView:async()=>{const r=await e.whenLayerView(t);return r.type==="scene-layer-graphics-3d"?void 0:r},view:e})}};s([o({constructOnly:!0})],l.prototype,"layerSource",void 0),s([o({constructOnly:!0})],l.prototype,"view",void 0),s([o({readOnly:!0})],l.prototype,"updating",null),s([o({readOnly:!0})],l.prototype,"availability",void 0),l=s([f("esri.views.interactive.snapping.featureSources.SceneLayerSnappingSource")],l);export{l as SceneLayerSnappingSource};
