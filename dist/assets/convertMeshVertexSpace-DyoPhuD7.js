import{am as p,s as m,Y as s}from"./index-DFyW9aWf.js";import{p as n}from"./MeshVertexAttributes-Bjy8w2Ob.js";import{B as a}from"./vertexSpaceConversion-B_l105Da.js";import"./meshProperties-Cj6q1fp6.js";import"./mat3f64-B5o_lm6j.js";import"./mat4f64-q_b6UJoq.js";import"./spatialReferenceEllipsoidUtils-D8EWNvkF.js";import"./computeTranslationToOriginAndRotation-iV5qSWJT.js";import"./projectPointToVector-tH3B4WDW.js";import"./meshVertexSpaceUtils-yFZXQeZK.js";import"./MeshLocalVertexSpace-B9fwR4UR.js";import"./vec3-CA_pbT5R.js";import"./BufferView-Ch9dAkTl.js";import"./vec4-0PCOMnon.js";async function E(t,r,o){await Promise.resolve(),p(o);const e=a(t,r,{useEllipsoid:o?.useEllipsoid});if(!e)throw new m("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:s(t.vertexAttributes.uv),color:s(t.vertexAttributes.color)}),r);return i.transform=null,i}export{E as convertMeshVertexSpace};
