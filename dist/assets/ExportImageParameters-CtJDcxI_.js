import{bd as u,cf as c,cg as m,ch as p,v as i,w as l,x as b}from"./index-DFyW9aWf.js";import{n as o}from"./floorFilterUtils-n6UOt7ty.js";const d={visible:"visibleSublayers",definitionExpression:"layerDefs",labelingInfo:"hasDynamicLayers",labelsVisible:"hasDynamicLayers",opacity:"hasDynamicLayers",minScale:"visibleSublayers",maxScale:"visibleSublayers",renderer:"hasDynamicLayers",source:"hasDynamicLayers"};let t=class extends u{constructor(e){super(e),this.floors=null,this.scale=0}destroy(){this.layer=null}get dynamicLayers(){if(!this.hasDynamicLayers)return null;const e=this.visibleSublayers.map((s=>{const a=o(this.floors,s);return s.toExportImageJSON(a)}));return e.length?JSON.stringify(e):null}get hasDynamicLayers(){return this.layer&&c(this.visibleSublayers,this.layer.serviceSublayers,this.layer.gdbVersion)}set layer(e){this._get("layer")!==e&&(this._set("layer",e),this.removeHandles("layer"),e&&this.addHandles([e.allSublayers.on("change",(()=>this.notifyChange("visibleSublayers"))),e.on("sublayer-update",(s=>this.notifyChange(d[s.propertyName])))],"layer"))}get layers(){const e=this.visibleSublayers;return e?e.length?"show:"+e.map((s=>s.id)).join(","):"show:-1":null}get layerDefs(){const e=!!this.floors?.length,s=this.visibleSublayers.filter((a=>a.definitionExpression!=null||e&&a.floorInfo!=null));return s.length?JSON.stringify(s.reduce(((a,n)=>{const y=o(this.floors,n),r=m(y,n.definitionExpression);return r!=null&&(a[n.id]=r),a}),{})):null}get version(){this.commitProperty("layers"),this.commitProperty("layerDefs"),this.commitProperty("dynamicLayers");const e=this.layer;return e&&(e.commitProperty("dpi"),e.commitProperty("imageFormat"),e.commitProperty("imageTransparency"),e.commitProperty("gdbVersion")),(this._get("version")||0)+1}get visibleSublayers(){const e=[];if(!this.layer)return e;const s=this.layer.sublayers,a=this.scale,n=r=>{r.visible&&(a===0||p(a,r.minScale,r.maxScale))&&(r.sublayers?r.sublayers.forEach(n):e.unshift(r))};s&&s.forEach(n);const y=this._get("visibleSublayers");return!y||y.length!==e.length||y.some(((r,h)=>e[h]!==r))?e:y}toJSON(){const e=this.layer;let s={dpi:e.dpi,format:e.imageFormat,transparent:e.imageTransparency,gdbVersion:e.gdbVersion||null};return this.hasDynamicLayers&&this.dynamicLayers?s.dynamicLayers=this.dynamicLayers:s={...s,layers:this.layers,layerDefs:this.layerDefs},s}};i([l({readOnly:!0})],t.prototype,"dynamicLayers",null),i([l()],t.prototype,"floors",void 0),i([l({readOnly:!0})],t.prototype,"hasDynamicLayers",null),i([l()],t.prototype,"layer",null),i([l({readOnly:!0})],t.prototype,"layers",null),i([l({readOnly:!0})],t.prototype,"layerDefs",null),i([l({type:Number})],t.prototype,"scale",void 0),i([l({readOnly:!0})],t.prototype,"version",null),i([l({readOnly:!0})],t.prototype,"visibleSublayers",null),t=i([b("esri.layers.support.ExportImageParameters")],t);export{t as y};
